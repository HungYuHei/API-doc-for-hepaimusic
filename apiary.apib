HOST: http://hepai.gaiamagic.com

--- API for hepaimusic.com ---
---

## API 地址

当前 API 版本为 `v1`

完整访问地址：`http://<web_site>/<version>/<api>`，例如要获取音乐列表：http://hepaimusic.com/v1/music

## Token

Token 需要通过 http header 的 `X-USER-ACCESS-TOKEN` 发送

## 分页

多页 (列表) 时分页参数为： 页码（默认为 1）：`page`，每页记录数量（默认为 10）：`per`  

建议对分页参数显式传值，以免后期默认值可能会修改。

## 用户名和昵称的区别

用户名是全站唯一的，昵称不是  
用户名长度为 2-12 位，只支持英文、数字及下划线；昵称 2-31 位，支持中文、英文、数字、空格、下划线、「$」、「.」以及「!」  
**在绝大多数位置应该是显示昵称，在评论中@的是用户名**

## 其它

旧版本文档: [https://gist.github.com/HungYuHei/5cd346dc8b15776b08d0](https://gist.github.com/HungYuHei/5cd346dc8b15776b08d0)

注意：Rails 中检查的是 `HTTP_X_USER_ACCESS_TOKEN`
---

--
User 用户
--
检查用户字段是否存在
GET /check/user/:field?value=xxx
< 200
{
    "name"    : "用户名",
    "nickname": "昵称",
    "email"   : "a@a.com",
    avatar: {
        "24x24": "URL1",
        "50x50": "URL2",
        "80x80": "URL3",
        "150x150": "URL4"
    }
}
// 不存在则返回 404

黄页（用户列表）
GET /users
< 200
[
    // 数据参部考「根据 ID 获取用户信息」部分
    {...},
    {...}
]

/*根据 ID 或 用户名 获取用户信息*/
GET  /users/:id_or_name
< 200
{
  "id"                 : "4ef330f38f0e7b0b5b00001b",
  "name"               : "用户名",
  "nickname"           : "昵称",
  "weibo_name"         : "绑定的新浪微博名",
  "douban_name"        : "绑定的豆瓣名",
  "tqq_name"           : "绑定的腾讯微博名",
  "description"        : "个人简介",
  "personal_page"      : "详细介绍（原始数据）",
  "personal_page_html" : "详细介绍（html过滤后数据）",
  "identity"           : "身份",
  "domains"            : [ "音乐爱好者", "志愿者" ], // 身份领域
  "tags"               : ["tag1", "tag2"],           // 用户标签
  "website"            : "个人网址",
  "province"           : "北京",
  "city"               : "北京",
  "following_count"    : 4,
  "followers_count"    : 2,
  "created_at"         : "2011-12-22T21:30:27+08:00",
  "is_following"       : false,
  "avatar"             : {
    "24x24": "URL1",
    "50x50": "URL2",
    "80x80": "URL3",
    "150x150": "URL4"
  }
}

获取个人动态
GET /users/:id/activities
< 200
[
  // 参考 /activities，但这里不返回 actor
  {...},
  {...}
]

获取当前登录用户的信息
GET /user
< 200
{ // 数据参考「根据 ID 获取用户信息」部分 }

GET /users/:id/douban_info
< 200
{ // 返回douban绑定时返回的数据，可能会有变动，请参考实际返回数据 }

GET /users/:id/weibo_info
< 200
{ // 返回weibo绑定时返回的数据，可能会有变动，请参考实际返回数据 }

检查是否关注了用户
GET /user/following/:user_id
< 200
// 已关注返回204，未关注返回404

关注用户
PUT /user/following/:user_id
< 201
{ // 数据参部考「根据 ID 获取用户信息」部分 }

取消关注用户
DELETE /user/following/:user_id
< 200
{ // 数据参部考「根据 ID 获取用户信息」部分 }

更新登录用户资料
PUT /user
{
  // 下面的字段都是可选
  "identity"      : "身份",
  "domains"       : "身份相关领域",
  "name"          : "用户名",
  "nickname"      : "昵称",
  "website"       : "http://website.com",
  "description"   : "简介",
  "province"      : "广东",
  "city"          : "广州",
  "personal_page" : "详细介绍"
}
< 200
{ // 数据参部考「根据 ID 获取用户信息」部分 }

更新用户头像
PUT /user/avatar
{ avatar: 头像图片 }
< 200
{
    avatar: {
        "24x24": "URL1",
        "50x50": "URL2",
        "80x80": "URL3",
        "150x150": "URL4"
    }
}

更新用户邮箱
PUT /user/email
{ current_email: '当前邮箱', email: '新邮箱', password_confirmation: '确认密码' }
< 200
{ updated: true }

修改密码
PUT /user/password
{ current_password: "当前密码", password: "新密码", password_confirmation: "新密码" }
< 200
{ updated: true }
// 修改失败时：
{
    password: [
        "两次输入的密码不一致"
    ],
    current_password: [
        "是无效的"
    ]
}

根据用户 ID 获取关注/粉丝列表
GET /users/:id/{followers, following}
< 200
[
    { // 数据参部考「根据 ID 获取用户信息」部分 },
    {...}
]

--
Music 音乐
--

音乐列表

可选参数：参考「根据 ID 获取音乐信息」
GET /music
< 200
[
    // 数据参部考「根据 ID 获取音乐信息」部分
    {...},
    {...}
]

根据 ID 获取音乐信息

----
注意：只有登录用户可获取本人**未公开**的音乐
----

可选参数：

    without_owner  - 是否返回发布人的信息（默认 false ）
    without_likers - 是否返回 likers 的信息（默认 false ）
    liker_limit    - 限制返回 liker 数量（默认 10 ）
GET /music/:id
< 200
{
    "id"             : "512f2de982ae477f2f000013",
    "name"           : "歌名",
    "description"    : "简介",
    "duration"       : 60,      // 音乐时长，单位：秒
    "type"           : "类型",
    "genre"          : "曲风",
    "tags"           : "",
    "audio_file"     : "音乐文件地址",
    "liked"          : false,   // 是否赞过
    "like_count"     : 1,       // 被赞次数
    "listen_count"   : 16,      // 收次数听
    "comments_count" : 1,       // 评论数
    "hits_count"     : 60,      // 浏览次数
    "own"            : true,    // 是否本人发布的
    "published"      : true,    // 是否公开
    "created_at"     : "2013-02-28T18:14:02+08:00",
    "cover" : {
        "120x120" : "URL1",
        "200x200" : "URL2"
    },
    "user": {
      // 此为发布此音乐的用户
      // 数据请参考「根据 ID 获取用户信息」
    },
    "likers": {
        { "id": "ID", "name": "用户名", "nickname": "昵称", "avatar": "参考「根据 ID 获取用户信息」中返回的 avatar" },
        {...}
    }
}

获取音乐的 likers
GET /music/:id/likers
< 200
[
    {数据请参考「根据 ID 获取用户信息」},
    {...}
]

删除音乐
DELETE /music/:id
< 200
{ deleted: true }

登录用户发布过的所有音乐（包括未公开的）

可选参数：

    without_owner  - 是否返回发布人的信息（默认 false ）
    without_likers - 是否返回 likers 的信息（默认 false ）
    liker_limit    - 限制返回 liker 数量（默认 10 ）
GET /user/music
< 200
[
    { // 数据请参考「根据 ID 获取音乐信息」},
    {...}
]

发布音乐可选的类型
GET /music/types
< 200
[ "原创", "翻唱", "混音", "翻奏", "改编" ]

发布音乐可选的曲风
GET /music/genres
< 200
["流行", "摇滚", "电子", "民谣", "说唱", "爵士", "新世纪", "古典", "世界音乐", "节奏蓝调", "蓝调", "乡村"]

发布音乐
POST /music
{ name: '歌名', description: '简介', type: '类型', genre: '曲风', tags: 'A,B,C', audio: 音频文件, cover: 封面图片, from_app: true, published: false }
< 200
{
    // 返回刚刚发布的音乐，数据请参考「根据 ID 获取音乐信息」
}

修改音乐

注意：`published` 只能从 `false` 修改为 `true`   
即一旦公开了，不能再修改为非公开
PUT /music/:id
{ name: '歌名', description: '简介', type: '类型', genre: '曲风', tags: 'A,B,C', cover: 封面图片, audio: 音频文件, from_app: true, published: false }
< 200
{
    // 返回修改成功的音乐，数据请参考「根据 ID 获取音乐信息」
}

赞音乐
PUT /user/like/music/:id
< 200
{ // 数据请参考「根据 ID 获取音乐信息」}

取消赞音乐
DELETE /user/like/music/:id
< 200
{ // 数据请参考「根据 ID 获取音乐信息」}

获取赞过的音乐列表

可选参数：参考「根据 ID 获取音乐信息」
GET /user/liked/music
< 200
[
    { // 数据请参考「根据 ID 获取音乐信息」},
    {...}
]

检测 music 是否为赞过
GET /user/liked/music/:id
< 200
{ liked: Boolean }

收藏音乐（列表）
PUT /user/collect/music/:music_ids
< 204

取消收藏音乐（列表）
DELETE /user/collect/music/:music_ids
< 204

获取已收藏的音乐列表

可选参数：参考「根据 ID 获取音乐信息」
GET /user/collected/music
< 200
[
    { // 数据请参考「根据 ID 获取音乐信息」},
    {...}
]

--
Comment 评论

评论分为： **直接评论主题（音乐或信息）的评论** 和 **回复某评论的评论**
--

获取 {音乐, 信息} 评论

分页参数是对评论进行分页

**注意：**  
列表只返回直接评论音乐的评论  
如果要返回所以评论（包括回复的），可以传入参数 `with_replies: true`
GET /{music, posts}/:id/comments
< 200
{
    "id"         : "51343ce78f0e7b78d6000002",
    "content"    : "@outsummer 是啊，脸和嗓子像兄妹关系。",
    "own"        : false, // 是否为登录用户发表的评论
    "created_at" : "2013-03-04T14:19:19+08:00",
    "actor"      : {
        // 此为发布此评论的用户
        // 数据请参考「根据 ID 获取用户信息」
    }
}

获取某条评论的所有回复

`commentable_id` : posts 或者 music 的 id
GET /{music, posts}/:commentable_id/comments/:comment_id/replies
< 200
[
    { // 数据参考「获取 {音乐, 信息} 评论」 },
    {...}
]

评论 {音乐, 信息}

如果是回复某条评论，将该评论 id 通过 `reply_to` 传入

**注意：** 回复的那条评论必须也是属于**同一个音乐**的
POST /{music, posts}/:id/comments
{ content: 'the content of your comment', reply_to: 'comment_id' }
< 201
{
    // 评论成功，返回评论内容（参考「获取音乐评论」）
}

删除登录用户的某条评论

----

参数说明：

    commentable_id : posts 或者 music 的 id
    comment_id     : 要删除的评论 id
DELETE /{music, posts}/:commentable_id/comments/:comment_id
< 204

--
Search 查找
--
{ "q": "查找关键字", c: "分类，请在[User, Post, Music]中选一个，注意大小写"}
GET /search
< 200
[
    // 此处为User, Post, Music的json返回集合，为了区分，json中加入了klass关键字，和上面分类中的提示一致
    {...},
    {...}
]

--
Timeline 时间线
--
获取登录用户的 Timeline

简单一句话理解就是：

`actor` `action` `target`  

`用户A` `赞` `音乐B`  

`用户C` `发布` `音乐D`
<table>
   <tr>
      <td>字段</td>
      <td>类型</td>
      <td>可能的值</td>
      <td>备注</td>
   </tr>
   <tr>
      <td>action</td>
      <td>String</td>
      <td>like, create</td>
      <td>表示用户「赞」或「发布」</td>
   </tr>
   <tr>
      <td>target_type</td>
      <td>String</td>
      <td>music, post</td>
      <td>用来识别 target 的类型</td>
   </tr>
   <tr>
      <td>target</td>
      <td>Object</td>
      <td></td>
      <td>按 target_type 的值对应是音乐和信息</td>
   </tr>
   <tr>
      <td>actor</td>
      <td>Object</td>
      <td></td>
      <td>实际上就是动作执行者</td>
   </tr>
   <tr>
      <td>likers</td>
      <td>Array</td>
      <td></td>
      <td>赞过这个对象的用户（当 action 的值为 like 才会有这个）</td>
   </tr>
</table>
GET /activities
< 200
{
    "id"          : "ID",
    "action"      : "like",
    "created_at"  : "2013-03-11T11:52:54+08:00",
    "target_type" : "music",
    "target": {
        // 数据请参考「根据 ID 获取音乐信息」
    },
    "actor": {
        // 数据请参考「根据 ID 获取用户信息」
    },
    "likers": [
        { "id": "ID", "name": "用户名", "nickname": "昵称", "avatar": "参考「根据 ID 获取用户信息」中返回的 avatar" },
        {...}
    ]
}

--
Notification 通知
--
获取登录用户通知列表

------
**可选**参数：

如果将参数 `page` 设为 `false` 可以关闭默认的分页，即获取所有通知

`from_app` : *true* （APP 的请求需要加上这个）

`state` : *unread* 时表示只获取未读通知，*read* 为只获取已读通知，不传此值则是获取所有通知

`types`，表示某类别的通知，多个类别通过 Array 传入，不传此值表示所有未读通知。
`types` 值：

    comment - 评论
    mention - 有 @ 的评论
    reply   - 回复评论的评论
    message - 私信
    follow  - 关注
    like    - 赞

------

简单一句话理解就是：

`actor.nickname` `operation` 你的 `notifiable.type`

`用户A` `赞了` 你的 `音乐`

------

operation 对应的描述：

    comment : 评论
    mention - 有 @ 的评论
    reply   - 回复评论的评论
    message : 私信
    follow  : 关注
    like    : 赞

GET /user/notifications
{ types: 'comment' } // 单一类别
{ types: ['comment', 'mention', 'reply', 'message', 'follow', 'like'] } // 多个类别
< 200
[
    {
        "id"         : "50fe60da82ae476f06000005",
        "operation"  : "like", // 可能的值：(comment mention reply message follow like)
        "read"       : false,
        "created_at" : "2013-01-22T17:50:18+08:00",
        "notifiable" : {
            "id"      : "2ge402fd82ae473d97000013",
            "content" : "text",  // 通知内容
            "url"     : "url",   // 通知链接地址
            "type"    : "music"
        },
        "actor"      : {...},
        "owner"      : {...}
    },
    {...}
]

批量标记通知为已读

------

可以标记 `指定id数组` 或者 `单一类别` 或者 `多个类别` 为已读

如果不传任何参数，就表示：将登录用户的所有未读通知都标记为已读

**注意**：如果同时传入 `ids` 和 `types`，只会处理 `ids` 而忽略 `types` 参数

----

可选的参数：`ids` 或 `types` ：

`ids` ：要标记的通知 id 集合

`types` 值：

    comment - 评论
    mention - 回复评论
    message - 私信
    follow  - 关注
    like    - 赞
PUT /user/notifications
{ ids: ['id1', 'id2'] }
{ types: 'comment' } // 单一类别
{ types: ['comment', 'mention', 'message', 'follow', 'like'] } // 多个类别
< 200
{ read: true }

标记单条通知为已读
PUT /user/notifications/:id
< 200
{ read: true }

--
Notification-Setting 用户通知设置
--

获取用户通知设置
GET /user/settings/notification
< 200
{ 
    "message_notification"  : true,
    "comment_notification"  : true,
    "followed_notification" : true
}

更新用户通知设置
PUT /user/settings/notification
{
    true 时为打开，false 为关闭
    "message_notification"  : true,   // 私信通知邮件
    "comment_notification"  : true,   // 评论通知邮件
    "followed_notification" : true    // 新增follower的通知邮件
}
< 200
{ updated: true }

--
Session 登录、注册（注意不需加上 API 版本）
--

登录
POST  /users/sign_in.json
{ "user": { "email": "EMAIL", "password": "PWD" } }
< 200
// 登录成功：
{
  "id"              : "ID",
  "auth_token"      : "TOKEN",
  "name"            : "NAME",
  "nickname"        : "nickname",
  "avatar"          : {
    "24x24": "URL1",
    "50x50": "URL2",
    "80x80": "URL3",
    "150x150": "URL4"
  },
  "description"     : "description",
  "identity"        : "identity",
  "domains"         : ["A", "B"],
  "tags"            : ["C", "D"],
  "website"         : "http://xxx",
  "province"        : "",
  "city"            : "",
  "following_count" : 3,
  "followers_count" : 1,
  "created_at"      : "2012-08-30T19:06:32+08:00",
  "updated_at"      : "2013-03-13T14:09:41+08:00",
}
// 登录失败：
{ "error": "MESSAGE" }

注册
POST  /users.json
{ "user": { "email": "EMAIL", "name": "NAME", "password": "PWD", "password_confirmation": "PWD" } }
< 200
// 注册成功：
{ "auth_token": "TOKEN" }
// 注册看失败：
{ "errors" :{"email" : ["邮箱格式不正确"] }} // 其它字段的错误信息类似

退出登录
DELETE /users/sign_out.json
< 204

--
Message 私信
**注意：私信下所有API都需要登录**
--

获取登录用户的对话列表

按不同的对话用户分组，一个用户一个对话
GET /messages
< 200
[
    // conversation列表
    {
        "id"             : "conversation id",
        "target_user"    : "接受者的json(user,参照user返回的json)",
        "last_message"   : "最后一条message的json(message,参照下面message返回的json)",
        "messages_count" : "该对话下message数量的总数"
    },
    {...}
]

根据user的id或者name获取当前用户与某个用户的对话
GET /messages/:id_or_name
< 200
[
    // conversation中的message列表
    {
        "id"              : "message id",
        "content"         : "message 正文",
        "state"           : "状态: new是未读, read是已读",
        "actor"           : "发送者的json(user,参照user返回的json)",
        "recipient"       : "接受者的json(user,参照user返回的json)",
        "conversation_id" : "对应conversation的id"
    },
    {...}
]

根据user的id或者name发送私信给某个用户，发送人将设置为当前用户
POST /messages/:id_or_name
{ "message": { "content": "message正文" } }
< 201
{
    "id"              : "message id",
    "content"         : "message 正文",
    "state"           : "状态: new是未读, read是已读",
    "actor"           : "发送者的json(user,参照user返回的json)",
    "recipient"       : "接受者的json(user,参照user返回的json)",
    "conversation_id" : "对应conversation的id" 
}

根据user的id或者name删除当前用户与某个用户的整个对话（即对话下的所有私信）
DELETE /messages/:id_or_name
< 200
{ deleted: true }

根据user的id或者name删除当前用户与某个用户对话下的具体某条私信
DELETE /messages/:id_or_name/:message_id
< 200
{ deleted: true }

--
Feedback 反馈
--

新建反馈(需登录)
POST /feedback
{ content: "反馈正文" }
< 201
{
    "id"         : "feedback的id",
    "content"    : "feedback的正文",
    "reply"      : "反馈回复",
    "replied_at" : "反馈回复的日期",
    "liker_ids"  : "赞成该feedback的user id数组",
    "owner"      : {...}
}

获取反馈列表
GET /feedback
< 200
[
    { // 内容参照新建反馈 },
    {...}
]

赞成反馈(需登录)
PUT /feedback/:id/vote
< 200
{
    // 内容参照新建反馈,
}

--
Taxonomy 分类、Tags
--

获取所有分类
GET /categories
< 200
[
    {
      "id"    : "4f3b6fba8f0e7b7bff000001",
      "name"  : "志愿者计划",
      "order" : 1,
      "title" : "志愿者计划"
    },
    {...}
]

获取分类下的 Tags
GET /categories/:id/tags
< 200
{
    "id"               : "4fb35b7d82ae47e4b200002b",
    "name"             : "我要",
    "multi_selectable" : false,
    "tags": [
        {
          "id": "6ae35b7d82ae47e4b200005g",
          "name": "卖二手乐器",
          "order": 1
        },
        {...}
    ]
}

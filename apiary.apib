HOST: http://hepai.gaiamagic.com

--- API for hepaimusic.com ---
---

## API 地址

当前 API 版本为 `v1`

完整访问地址：`http://<web_site>/<version>/<api>`，例如要获取音乐列表：`http://hepaimusic.com/v1/music`

## Token

Token 需要通过 http header 的 `X-USER-ACCESS-TOKEN` 发送

## 分页

多页 (列表) 时分页参数为： 页码（默认为 1）：`page`，每页记录数量（默认为 10）：`per`

建议对分页参数显式传值，以免后期默认值可能会修改。

## 用户名和昵称的区别

用户名是全站唯一的，昵称不是  
用户名长度为 2-12 位，只支持英文、数字及下划线；昵称 2-31 位，支持中文、英文、数字、空格、下划线、「$」、「.」以及「!」  
**在绝大多数位置应该是显示昵称，在评论中@的是用户名**

## Tag 相关

通常 Model 的附带属性是被定义为 Tag  
目前被定义为 Tag 的属性有：

* 音乐曲风、类型
* 信息分类
* 用户身份、领域、省市

---

--
User 用户
--
检查用户字段是否存在
GET /check/user/:field?value=xxx
< 200
{
    "name"    : "用户名",
    "nickname": "昵称",
    "email"   : "a@a.com",
    avatars: {
        "24x24": "URL1",
        "50x50": "URL2",
        "80x80": "URL3",
        "150x150": "URL4"
    }
}
// 不存在则返回 404

黄页（用户列表）
GET /users
< 200
[
    // 数据参部考「根据 ID 获取用户信息」部分
    {...},
    {...}
]

/*根据 ID 或 用户名 获取用户信息*/
GET  /users/:id_or_name
< 200
{
  "id"                 : "4ef330f38f0e7b0b5b00001b",
  "name"               : "用户名",
  "nickname"           : "昵称",
  "weibo_name"         : "绑定的新浪微博名",
  "douban_name"        : "绑定的豆瓣名",
  "tqq_name"           : "绑定的腾讯微博名",
  "description"        : "个人简介",
  "website"            : "个人网址",
  "personal_page"      : "详细介绍",
  "personal_page_html" : "html转义后的详细介绍",     // 只会包含<a><br><img>标签
  "identity"           : { // Tag Object },          // 身份
  "domains"            : [{ // Tag Object }, ...],   // 身份领域
  "province"           : { // Tag Object },
  "city"               : { // Tag Object },
  "music_count"        : 3,
  "following_count"    : 4,
  "followers_count"    : 2,
  "created_at"         : "2011-12-22T21:30:27+08:00",
  "is_following"       : false,
  "avatars"             : {
    "24x24": "URL1",
    "50x50": "URL2",
    "80x80": "URL3",
    "150x150": "URL4"
  },
  "sns": {
    "douban": {
      // 参考 GET /users/:id/douban_info
    },
    "weibo": {
      // 参考 GET /users/:id/weibo_info
    }
  }
}

获取个人动态
GET /users/:id/activities
< 200
[
  // 参考 /activities，但这里不返回 actor
  {...},
  {...}
]

获取当前登录用户的信息
GET /user
< 200
{
  // 数据参考「根据 ID 获取用户信息」部分
  // 不过这里会额外返回 email 字段
}

GET /users/:id/douban_info
< 200
{
  name            : "name",
  description     : "Hello World",
  avatar          : "http://img3.douban.com/icon/u36865564-2.jpg",
  location        : "广东佛山",
  link            : "http://www.douban.com/people/xxx/",
  followers_count : null,
  following_count : null,
  updated_at      : null
}

GET /users/:id/weibo_info
< 200
{
  name            : "name",
  description     : "description",
  avatar          : "http://tp3.sinaimg.cn/1689213974/180/1266825599/1",
  location        : "广东 佛山",
  link            : "http://weibo.com/xxx",
  followers_count : 273,
  following_count : 365,
  updated_at      : "2013-08-10T13:48:57+08:00"
}

检查是否关注了用户
GET /user/following/:user_id_or_name
< 200
// 已关注返回204，未关注返回404

关注用户
PUT /user/following/:user_id_or_name
< 201
{ // 数据参部考「根据 ID 获取用户信息」部分 }

取消关注用户
DELETE /user/following/:user_id_or_name
< 200
{ // 数据参部考「根据 ID 获取用户信息」部分 }

修改用户个人资料 / 邮箱 / 密码

注意：

* 如果要修改邮箱或密码，需要传入当前密码，修改个人资料则不需要
* 三个操作可以同时进行，只要传入对应的必须字段
* 如果修改了邮箱，系统会发送确认邮件到新邮箱地址，需要用户点击邮件中的确认链接才能最终完成更新邮箱操作。
PUT /user
{
  // 以下修改个人资料字段（任意可选）
  "avatar"        : 头像图片或URL
  "city_id"       : "对应Tag的id",
  "province_id"   : "对应Tag的id",
  "identity_id"   : "对应Tag的id",
  "domain_ids"    : ['tag_id'],
  "name"          : "用户名",
  "nickname"      : "昵称",
  "website"       : "http://website.com",
  "description"   : "简介",
  "personal_page" : "详细介绍",
  // 以下是修改密码必须传入的字段
  "password"              : "新密码",
  "password_confirmation" : "重复确认新密码",
  "current_password"      : "确认密码（当前密码）",
  // 以下是修改邮箱必须传入的字段
  "email"            : '新邮箱',
  "current_password" : '确认密码（当前密码）'
}
< 200
{ // 数据参部考「根据 ID 获取用户信息」部分 }

根据用户 ID 获取关注/粉丝列表
GET /users/:id/{followers, following}
< 200
[
    { // 数据参部考「根据 ID 获取用户信息」部分 },
    {...}
]

获取用户身份列表
GET /users/identities
< 200
[
  {
    id: "521455e682ae47df3100023c",
    name: "音乐人",
    slug: "musician",
    order: 1,
    groups: [
      {
        id: "521455e782ae47df31000268",
        name: "音乐相关",
        multi_selectable: false,
        tags: [
          {
            id: "521455e482ae47df310001f0",
            name: "主唱",
            slug: "62086276",
            order: 1,
          },
          ...
        ]
      }
    ]
  },
  ...
]

--
Music 音乐
--

音乐列表

可选参数：参考「根据 ID 获取音乐信息」
GET /music
< 200
[
    // 数据参部考「根据 ID 获取音乐信息」部分
    {...},
    {...}
]

指定用户发布过的音乐列表

如果 :id_or_name 是当前登录用户，则也会返回未公开的音乐

可选参数：

    without_owner  - 不返回发布人的信息（默认 false ）
    without_likers - 不返回 likers 的信息（默认 true ）
    liker_limit    - 限制返回 liker 数量（默认 10 ）
GET /users/:id_or_name/music
< 200
[
    { // 数据请参考「根据 ID 获取音乐信息」},
    {...},
    {...}
]


根据 ID 获取音乐信息

----
注意：只有登录用户可获取本人**未公开**的音乐
----

可选参数：

    without_owner  - 不返回发布人的信息（默认 false ）
    without_likers - 不返回 likers 的信息（默认 false ）
    liker_limit    - 限制返回 liker 数量（默认 10 ）
GET /music/:id
< 200
{
    "id"             : "512f2de982ae477f2f000013",
    "name"           : "歌名",
    "lyric"          : "歌词",
    "lyric_html"     : "html转义后的歌词", // 只会包含<a><br>标签
    "type"           : { // Tag Object },
    "genre"          : { // Tag Object },
    "tags"           : [{ // Tag Object }, ...],
    "audio_file"     : "音乐文件地址",
    "liked"          : false,   // 是否赞过
    "like_count"     : 1,       // 被赞次数
    "listen_count"   : 16,      // 收次数听
    "comments_count" : 1,       // 评论数
    "hits_count"     : 60,      // 浏览次数
    "own"            : true,    // 是否本人发布的
    "published"      : true,    // 是否公开
    "created_at"     : "2013-02-28T18:14:02+08:00",
    "cover" : {
        "120x120" : "URL1",
        "200x200" : "URL2"
    },
    "user": {
      // 此为发布此音乐的用户
      // 数据请参考「根据 ID 获取用户信息」
    },
    "likers": {
        { "id": "ID", "name": "用户名", "nickname": "昵称", "avatars": "参考「根据 ID 获取用户信息」中返回的 avatars" },
        {...}
    }
}

获取音乐的 likers
GET /music/:id/likers
< 200
[
    {数据请参考「根据 ID 获取用户信息」},
    {...}
]

删除音乐
DELETE /music/:id
< 200
{ deleted: true }

增加音乐收听次数
PUT /music/:id/listen_count
< 200
{ listen_count: 2 }

登录用户发布过的所有音乐（包括未公开的）

可选参数：

    without_owner  - 不返回发布人的信息（默认 true ）
    without_likers - 不返回 likers 的信息（默认 true ）
    liker_limit    - 限制返回 liker 数量（默认 10 ）
GET /user/music
< 200
[
    { // 数据请参考「根据 ID 获取音乐信息」},
    {...}
]

发布音乐可选的类型
GET /music/types
< 200
[
  {
    id: "521455dd82ae47df31000007",
    name: "混音",
    slug: "remix",
    order: 1
  },
  ...
]

发布音乐可选的曲风
GET /music/genres
< 200
[
  {
    id: "521455dd82ae47df31000007",
    name: "摇滚",
    slug: "rock",
    order: 1
  },
  ...
]

发布音乐
POST /music
{ name: '歌名', lyric: '歌词', type_id: '对应Tag的id', genre_id: '对应Tag的id', tag_ids: ['对应Tag的id'], audio: 音频文件, cover: 封面图片, from_app: true, published: false }
< 200
{
    // 返回刚刚发布的音乐，数据请参考「根据 ID 获取音乐信息」
}

修改音乐

注意：`published` 只能从 `false` 修改为 `true`
即一旦公开了，不能再修改为非公开
PUT /music/:id
{ name: '歌名', lyric: '歌词', type_id: '对应Tag的id', genre_id: '对应Tag的id', tag_ids: ['对应Tag的id'], cover: 封面图片, audio: 音频文件, from_app: true, published: false }
< 200
{
    // 返回修改成功的音乐，数据请参考「根据 ID 获取音乐信息」
}

赞音乐
PUT /user/liked/music/:music_id
< 200
{ // 数据请参考「根据 ID 获取音乐信息」}

取消赞音乐
DELETE /user/liked/music/:music_id
< 200
{ // 数据请参考「根据 ID 获取音乐信息」}

获取赞过的音乐列表

可选参数：参考「根据 ID 获取音乐信息」
GET /user/liked/music
< 200
[
    { // 数据请参考「根据 ID 获取音乐信息」},
    {...}
]

检测 music 是否被登录用户赞过
GET /user/liked/music/:id
< 200
{ liked: Boolean }

收藏音乐（列表）
PUT /user/collect/music/:music_ids
< 204

取消收藏音乐（列表）
DELETE /user/collect/music/:music_ids
< 204

获取已收藏的音乐列表

可选参数：参考「根据 ID 获取音乐信息」
GET /user/collected/music
< 200
[
    { // 数据请参考「根据 ID 获取音乐信息」},
    {...}
]

--
Post 信息
--

信息列表
GET posts
< 200
[
  // 数据参部考「根据 ID 获取信息」部分
  {...},
  {...}
]

根据 ID 获取信息
GET /posts/:id
< 200
{
  "id"             : ID,
  "title"          : "标题",
  "content"        : "正文",
  "content_html"   : "html转义后的正文", // 只会包含<a><br><img>标签
  "category"       : { // Tag Object },
  "tags"           : [{ // Tag Object }, ...],
  "hits_count"     : 12,
  "comments_count" : 8,
  "own"            : true,
  "created_at"     : "2013-06-27T13:40:41+08:00",
  "user": {
    // 数据请参考「根据 ID 获取用户信息」
  }
}

发布信息
POST /posts
{ title: '标题', content: '正文内容', category_id: '实际为对应的tag_id', tag_ids: ['id1', 'id2'] }
< 201
{
  // 返回刚刚发布的信息，数据请参考「根据 ID 获取信息」
}

修改信息
PUT /posts/:id
{ title: '标题', content: '正文内容', category_id: '实际为对应的tag_id', tag_ids: ['id1', 'id2'] }
< 200
{
  // 返回刚刚修改的信息，数据请参考「根据 ID 获取信息」
}

删除信息
DELETE /posts/:id
< 204

指定用户发布过的信息列表
GET /users/:id_or_name/posts
< 200
[
  // 数据参部考「根据 ID 获取信息」部分
  {...},
  {...}
]

获取所有信息分类
GET /posts/categories
< 200
[
  { // 数据参考「获取某个分类」},
  {...}
]

获取信息某个分类
GET /posts/categories/:id
< 200
{
  "id"    : "4f3b6fba8f0e7b7bff000001",
  "name"  : "志愿者计划",
  "slug"  : "slug"
  "order" : 1,
  "groups" : [
    {
      "id"               : "4fb35b7d82ae47e4b200002b",
      "name"             : "我要",
      "multi_selectable" : false,
      "tags": [
        {
          "id"    : "6ae35b7d82ae47e4b200005g",
          "name"  : "卖二手乐器",
          "slug"  : "slug"
          "order" : 1
        },
        {...}
      ]
    },
    {...}
  ],
}

--
Comment 评论

评论分为： **直接评论主题（音乐或信息）的评论** 和 **回复某评论的评论**
--

获取 {音乐, 信息} 评论

分页参数是对评论进行分页

默认只返回直接评论主题的评论，回复评论的不会返回

可选参数：

    flatten       - 返回所有评论（包括回复的，默认 false）
    with_reply_to - 如果是回复评论，返回该评论（默认 false ）
GET /{music, posts}/:id/comments
< 200
{
    "id"           : "51343ce78f0e7b78d6000002",
    "content"      : '正文',
    "content_html" : 'html转义后的正文',          // 只会包含<a><br>标签
    "own"          : false,                       // 是否为登录用户发表的评论
    "is_reply"     : false,
    "created_at"   : "2013-03-04T14:19:19+08:00",
    "actor"        : {
        // 此为发布此评论的用户
        // 数据请参考「根据 ID 获取用户信息」
    },
    reply_to: {
      // 如果with_reply_to为true时会附上此数据
    }
}

获取某条评论的所有回复

`commentable_id` : posts 或者 music 的 id
GET /{music, posts}/:commentable_id/comments/:comment_id/replies
< 200
[
    { // 数据参考「获取 {音乐, 信息} 评论」 },
    {...}
]

评论 {音乐, 信息}

如果是回复某条评论，将该评论 id 通过 `reply_to` 传入

**注意：** 回复的那条评论必须也是属于**同一个音乐**的
POST /{music, posts}/:id/comments
{ content: 'the content of your comment', reply_to: 'comment_id' }
< 201
{
    // 评论成功，返回评论内容（参考「获取音乐评论」）
}

删除登录用户的某条评论

----

参数说明：

    commentable_id : posts 或者 music 的 id
    comment_id     : 要删除的评论 id
DELETE /{music, posts}/:commentable_id/comments/:comment_id
< 204

--
Search 查找
--
{ "q" : "查找关键字", "c" : "（可选）分类，请在 {user, post, music} 中选一个，为空时则表示所有分类"}
GET /search
< 200
[
    // 此处为User, Post, Music的json返回集合，为了区分，json中加入了klass关键字，和上面分类中的提示一致
    {...},
    {...}
]

--
Timeline 时间线
--
获取登录用户的 Timeline

简单一句话理解就是：

`actor` `action` `target`

`用户A` `赞` `音乐B`

`用户C` `发布` `音乐D`
<table>
   <tr>
      <td>字段</td>
      <td>类型</td>
      <td>可能的值</td>
      <td>备注</td>
   </tr>
   <tr>
      <td>action</td>
      <td>String</td>
      <td>like, create</td>
      <td>表示用户「赞」或「发布」</td>
   </tr>
   <tr>
      <td>target_type</td>
      <td>String</td>
      <td>music</td>
      <td>用来识别 target 的类型</td>
   </tr>
   <tr>
      <td>target</td>
      <td>Object</td>
      <td></td>
      <td>按 target_type 的值对应是音乐和信息</td>
   </tr>
   <tr>
      <td>actor</td>
      <td>Object</td>
      <td></td>
      <td>实际上就是动作执行者</td>
   </tr>
   <tr>
      <td>likers</td>
      <td>Array</td>
      <td></td>
      <td>赞过这个对象的用户（当 action 的值为 like 才会有这个）</td>
   </tr>
</table>
GET /activities
{ "page": 5, "per": 10 } // per不指定时，默认为10
{ "since_id": "50fe60da82ae476f06000005", "direction": "forward" }
//since_id为event的id，存在的时候将会忽略page参数，direction不指定时默认为"forward"
< 200
{
    "id"          : "ID",
    "action"      : "like",
    "created_at"  : "2013-03-11T11:52:54+08:00",
    "target_type" : "music",
    "target": {
        // 数据请参考「根据 ID 获取音乐信息」
    },
    "actors":[ 
      // 注意：
      // activities type 
        // 为create，actors仅是发布者本身；
        // 为likers，actors按照likers时间排序，最先的一个就是本activity产生者
      {// 数据请参考「根据 ID 获取用户信息」},
      {// 数据请参考「根据 ID 获取用户信息」}
    ],
}

--
Notification 通知
--
获取登录用户通知列表

------
**可选**参数：

如果将参数 `page` 设为 `false` 可以关闭默认的分页，即获取所有通知

`from_app` : *true* （APP 的请求需要加上这个）

`state` : *unread* 时表示只获取未读通知，*read* 为只获取已读通知，不传此值则是获取所有通知

`types`，表示某类别的通知，多个类别通过 Array 传入，不传此值表示所有未读通知。
`types` 值：

    comment - 评论
    mention - 有 @ 的评论
    reply   - 回复评论的评论
    message - 私信
    follow  - 关注
    like    - 赞

------

简单一句话理解就是：

`actor.nickname` `operation` 你的 `notifiable.type`

`用户A` `赞了` 你的 `音乐`

------

operation 对应的描述：

    comment : 评论
    mention - 有 @ 的评论
    reply   - 回复评论的评论
    message : 私信
    follow  : 关注
    like    : 赞

GET /user/notifications
{ types: 'comment' } // 单一类别
{ types: ['comment', 'mention', 'reply', 'message', 'follow', 'like'] } // 多个类别
< 200
[
    {
        "id"         : "50fe60da82ae476f06000005",
        "operation"  : "like", // 可能的值：(comment mention reply message follow like)
        "read"       : false,
        "created_at" : "2013-01-22T17:50:18+08:00",
        "notifiable" : {
            "id"              : "2ge402fd82ae473d97000013",
            "content"         : "text",  // 通知内容
            "url"             : "url",   // 通知链接地址
            "type"            : "music",
            "covers"          : {...},   // notifiable.type是music时会返回这个
            "comment_id"      : 'ID',    // operation是comment时会返回这个
            "comment_content" : 'xxx'    // operation是comment时会返回这个
        },
        "actor"      : {...},
        "owner"      : {...}
    },
    {...}
]

批量标记通知为已读

------

可以标记 `指定id数组` 或者 `单一类别` 或者 `多个类别` 为已读

如果不传任何参数，就表示：将登录用户的所有未读通知都标记为已读

**注意**：如果同时传入 `ids` 和 `types`，只会处理 `ids` 而忽略 `types` 参数

----

可选的参数：`ids` 或 `types` ：

`ids` ：要标记的通知 id 集合

`types` 值：

    comment - 评论
    mention - 回复评论
    message - 私信
    follow  - 关注
    like    - 赞
PUT /user/notifications
{ ids: ['id1', 'id2'] }
{ types: 'comment' } // 单一类别
{ types: ['comment', 'mention', 'message', 'follow', 'like'] } // 多个类别
< 200
{ read: true }

标记单条通知为已读
PUT /user/notifications/:id
< 200
{ read: true }

--
Notification-Setting 用户通知设置
--

获取用户通知设置
GET /user/settings/notification
< 200
{
    "message_notification"  : true,
    "comment_notification"  : true,
    "followed_notification" : true
}

更新用户通知设置
PUT /user/settings/notification
{
    true 时为打开，false 为关闭
    "message_notification"  : true,   // 私信通知邮件
    "comment_notification"  : true,   // 评论通知邮件
    "followed_notification" : true    // 有新关注通知邮件
}
< 200
{
    // 返回更新后的通知设置
    "message_notification"  : true,
    "comment_notification"  : true,
    "followed_notification" : true
}

--
Session 登录、注册（注意不需加上 API 版本）
--

登录
POST  /users/sign_in.json
{ "user": { "email": "EMAIL", "password": "PWD" } }
< 200
// 登录成功：
{
  "id"              : "ID",
  "auth_token"      : "TOKEN",
  "name"            : "NAME",
  "nickname"        : "nickname",
  "avatars"         : {
    "24x24": "URL1",
    "50x50": "URL2",
    "80x80": "URL3",
    "150x150": "URL4"
  },
  "description"     : "description",
  "province"        : { // Tag Object },
  "city"            : { // Tag Object },
  "identity"        : { // Tag Object },
  "domains"         : [{ // Tag Object }, ...],
  "website"         : "http://xxx",
  "following_count" : 3,
  "followers_count" : 1,
  "created_at"      : "2012-08-30T19:06:32+08:00",
  "updated_at"      : "2013-03-13T14:09:41+08:00",
}
// 登录失败：
{ "error": "MESSAGE" }

注册
POST  /users.json
{ "user": { "email": "EMAIL", "name": "NAME", "password": "PWD", "password_confirmation": "PWD" } }
< 200
// 注册成功：
{ "auth_token": "TOKEN" }
// 注册看失败：
{ "errors" :{"email" : ["邮箱格式不正确"] }} // 其它字段的错误信息类似

退出登录
DELETE /users/sign_out.json
< 204

--
Message 私信
**注意：私信下所有API都需要登录**
--

获取登录用户的对话列表

按不同的对话用户分组，一个用户一个对话
GET /messages
< 200
[
    // conversation列表
    {
        "id"             : "conversation id",
        "target_user"    : "接受者的json(user,参照user返回的json)",
        "last_message"   : "最后一条message的json(message,参照下面message返回的json)",
        "messages_count" : "该对话下message数量的总数"
    },
    {...}
]

根据user的id或者name获取当前用户与某个用户的对话
GET /messages/:user_id_or_name
< 200
[
    // conversation中的message列表
    {
        "id"              : "message id",
        "content"         : "message 正文",
        "content_html"    : "html转义后的正文",  // 只会包含<a><br>标签
        "state"           : "状态: new是未读, read是已读",
        "own"             : "是否登录用户发送的",
        "actor"           : "发送者的json(user,参照user返回的json)",
        "recipient"       : "接受者的json(user,参照user返回的json)",
        "conversation_id" : "对应conversation的id"
    },
    {...}
]

根据user的id或者name发送私信给某个用户，发送人将设置为当前用户
POST /messages/:user_id_or_name
{ content: "message正文" }
< 201
{
    "id"              : "message id",
    "content"         : "message 正文",
    "content_html"    : "html转义后的正文",  // 只会包含<a><br>标签
    "state"           : "状态: new是未读, read是已读",
    "actor"           : "发送者的json(user,参照user返回的json)",
    "recipient"       : "接受者的json(user,参照user返回的json)",
    "conversation_id" : "对应conversation的id"
}

根据user的id或者name删除当前用户与某个用户的整个对话（即对话下的所有私信）
DELETE /messages/:user_id_or_name
< 200
{ deleted: true }

根据user的id或者name删除当前用户与某个用户对话下的具体某条私信
DELETE /messages/:user_id_or_name/:message_id
< 200
{ deleted: true }

--
Feedback 反馈
--

新建反馈(需登录)
POST /feedback
{ content: "反馈正文" }
< 201
{
    "id"         : "feedback的id",
    "content"    : "feedback的正文",
    "reply"      : "反馈回复",
    "replied_at" : "反馈回复的日期",
    "voted"      : "是否已赞成",
    "vote_count" : "赞成的数量",
    "owner"      : {...}
}

获取反馈列表
GET /feedback
< 200
[
    { // 内容参照新建反馈 },
    {...}
]

赞成反馈(需登录)
PUT /feedback/:id/vote
< 200
{ "vote_count" : "赞成的数量" }

--
Areas 地区列表
--

地区列表
GET /areas
< 200
[
  {
    id: ID,
    name: "北京",
    slug: "25391085",
    order: 1
  },
  {
    id: ID,
    name: "广东",
    slug: "95989296",
    order: 1,
    cities: [
      {
        id: ID,
        name: "广州",
        slug: "38354950",
        order: 1
      },
      {
        id: ID,
        name: "深圳",
        slug: "71649796",
        order: 1
      }
    ]
  },
  ...
]

--
Link获取
--

所有Links返回，现在是返回全部，没有分页
GET /links
< 200
[
  { 
    id: ID,
    name: "link_name",
    url: "link_url",
    images: { 
      origin: "image_url"
    }
  },
  ...
]
